一、Vue概述
what？
	Vue是渐进式的框架，核心库关注视图层
why？
	1、Vue继承了ng指令和react组件等优势开发出来的
	2、Vue渐进式的框架，官方提供了全套的技术支持
	3、Vue 效率比较高 代码组织非常轻松
	
where？
	视图层、spa、部署到服务器提供了非常多的官方工具

二、搭建Vue开发环境
1、CLI
https://github.com/vuejs/vue-cli
(参考：https://github.com/kunyashaw/vue2Examples)

2、引入文件
引入vue.js文件到工程

三、使用vue
1、vue基本用法
el:element
data:数据
methods：方法
directives:

new Vue({
data:
el:

})

2、vue自带指令
循环：v-for="临时变量名 in 集合"
		  v-for="(value,key) in 集合"
选择：v-if/v-else-if/v-else 添加分支处理不同的选				择结果
绑定：v-bind 将变量的值 绑定到组件的 某一个属性 
							a v-bind:href='linkUrl'
							缩写：a :href='linkUrl'
双向数据绑定：
			v-model 双向数据绑定的指令，模型数据可以绑定到视图，视图中用户操作的结果绑定到数据
			修饰符：
				.lazy - 取代 input 监听 change 事件
				.number - 输入字符串转为数字
				.trim - 输入首尾空格过滤
			input		v-model.number='num1'

事件绑定：
			v-on 后边跟上事件的名称以及对应的处理函数
			button v-on:click="handleClick"
			button @click="handleClick"


3、vue自定义指令

自定义指令，需要在vue的实例中，定义一个directives,返回一个对象，在对象中完成指令的定义

每一个指令对应着都有自己的钩子函数：
bind
update
unbind

new Vue({

	directives:{
		change:{
			bind:func,//绑定
			update:func,//更新
			unbind:func,//移除
		}
	}
})

change 指令的名称，在使用: v-change.

练习：
自定义一个指令，指令用在按钮上，作用：点击按钮超过5次时，将按钮从DOM中移除。按钮显示的文本内容就是你点击了多少次。

要求：指令在被调用时，在bind/update/unbind方法：打印出来当前的状态（ in bind /in update/in unbind）


4、过滤器
vue没有自己的官方的过滤器

①方案1：自定义
过滤器的本质其实就是方法（有输入输出）。
过滤器通过管道符号（|）进行调用，支持多重过滤

和ng过滤器区别主要传参：
ng {{price| currency:'￥'}}
vue {{price| currency('￥')}}

new Vue({
	filters:{
		filterName：function(value,arg1,arg2){
			return 过滤后的结果
		}
	}
})

②方案2：借助第三方的
https://github.com/wy-ei/vue-filter


练习：实现一个过滤器，字符串转换为大写的处理。




5、Vue属性
el 将实例挂载到指定的视图
data 初始化
methods 方法
directives 指令
filters 过滤器
computed 计算属性 复杂的业务逻辑
watch 监听
components 定义一些局部组件

计算属性：
new Vue({
	computed:{
		handleMsg:function(){
	
		}
	}
})

与methods，不同的是计算属性是基于它们的依赖进行缓存的。计算属性只有在它的相关依赖发生改变时才会重新求值

监听属性：
watch：{
 kw：function(newValue,oldValue){
 }
}

6、生命周期
React中生命周期：mount update unmount
Vue的实例生命周期：create mount update destroy
create:
 beforeCreate
 created
mount:
	beforeMount
	mounted
update
	beforeUpdate
	updated
destroy	
	beforeDestroy
	destroyed


7、组件的创建和使用

局部组件的创建和使用：
创建：
 Vue({
	components:{
		'组件名称':{
			template:''
		}
	}
 })
使用：就像使用普通的html标签一样
 <my-component></my-component>

全局组件：
创建
Vue.component('组件名称'，{
	template:''
})
使用：和局部组件用法一样


注意事项：
组件的命名：必须是烤串的写法，要求都是小写。

全局组件和局部组件的区别：
全局组件可以在任意一个组件中去使用，可以构造更复杂的全局组件
局部组件只能够在vue实例所绑定的视图中调用。

练习：
实现待做事项列表

按照作用域分类：
创建组件方式：
局部组件
全局组件

按照模板的写法分类：
template:'<h1></h1>'

template:`<h1>
</h1>`

script type='text/x-template' id='myid' 
template:'#myid'


通过jsx的语法去指定模板（必须在命令行创建的模板中才可以--因为会有对应的依赖）

直接创建一个以vue结尾的文件（通过命令行创建的模板默认的方式）


React ui层 不等于 样式类的库
使用场景：数据操作非常频繁
https://github.com/enaqx/awesome-react


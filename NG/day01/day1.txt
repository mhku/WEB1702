alt+f2  方便在webStorm中预览页面效果的快捷键组合

一、设计原则
①YANGI
you arn't gonna need it
不写不需要的代码

②KISS 
keep it simple and stupid
越简单越好

③DRY
Dont't Repeat Yourself
善于封装和重用

④高内聚、低耦合
耦合：不同的功能模块之间的关系
低耦合：降低不同模块之间的关系

⑤SRP
single responsibility principle
功能要细化，每一个方法或者模块，就用来实现一个指定的功能。

⑥OCP
open closed principle 开闭原则
对于扩展开放 对于修改关闭

⑦最少知识法则
封装的功能单位要小，只与自己相关

二、设计模式
23种常用的设计模式。

了解常见的设计模式：
工厂方式模式、单例模式、组合模式、适配器模式、迭代模式。。


MVC： model(数据) View（视图） Controller（控制器）

MVVM：model view viewModel

三、AngularJS 概述

1.*与angular2.0：
angular2.0 typescript

what？是一个用来实现SPA的基于MVC的框架

when？实现SPA

why?
核心特点：
①采用了MVC的设计模式
②双向数据绑定
③依赖注入
④模块化设计

how？
采用引入js文件的方式

四、基本使用

1、表达式
语法：<any>{{表达式}}</any>
作用：将表达式的结果 输出 到当前位置

算术运算、比较运算、逻辑运算、三目运算。。

练习：通过双花括号的语法 来测试比较运算、逻辑运算、三目运算

新建一个html文件，实现：
通过ngInit来初始化一个对象数组(4个对象)，每个对象包含name\sex\score\age，将数组中的数据通过双花括号语法显示在table。

ngApp/ngInit/ngRepeat/ngIf(添加/删除)/ngShow/ngHide/ngSrc(比较特殊，在读取变量值要加上双花括号)/ngDisabled/ngChecked/ngClass/ngStyle/ngClick/ngDblclick/ngChange...

2、常用指令
ng中指令：是由angularJS提供的，可以在标签中作为扩展属性、扩展标签（ngView作为标签来使用：<ng-view/>）

指令都是采用驼峰式的命名方式，在使用的时候采用烤串式命名

ngApp：
①启动angularJS
②指定ng的作用范围
注意事项：第一次调用时有效的

ngInit:初始化变量
在这个指令中，声明变量时不需要写上var关键字；如果要声明多个变量，通过分号隔开
<any ng-init="count=10;name='zhangsan'">

ngBind：
<any ng-bind="表达式"></any>
将表达式的结果输出到当前元素位置去显示，与双花括号的区别是：
双花括号在ng启动成功之前是会作为普通的字符串去显示，启动成功，替换表达式的结果，会有闪烁的情况出现
ngBind指令由于是作为属性来使用的，如果ng没有启动成功，是不识别该属性，启动成功之后，直接显示值

ngRepeat:
实现一个集合的遍历，并同时为集合中的每一项 实例化一个模板
用法：
<any ng-repeat="tmp in myList">
{{tmp}}
</any>

<any ng-repeat="(key,value) in myList">
{{value}}
</any>

ngRepeat提供属性：
$index 迭代的偏移量
$dle/$last/.. 布尔类型


练习：通过ngRepeat来重构上午学生数组显示在table中的练习。


ngIf指令
选择挂载到DOM或者从DOM中移除:
并不是隐藏或者显示，而是直接添加或者删除
<any ng-if="表达式"></any>

通过ngIf来显示成绩及格的行。



3、常用其他指令
ngSrc 配合img标签
<img ng-src='img/{{imgUrl}}'></img>

ngShow/ngHide
根据表达式的值 决定一个元素是要显示还是隐藏

ngDisabled、ngChecked

4、MVC

在ng中如何理解MVC？
Model 通过js定义在$scope中的变量
View 通过ng指令和双花括号增强后的html
Controller：


为什么会出现MVC？
①工程化
②代码量-》封装和重用

mvc的工作原理：
视图接收用户的操作，会触发控制中定义好的方法，在方法中实现对数据的增删改查的操作，数据和视图是解耦的，数据和视图是通过绑定进行显示的。
M：定义的数据
V：视图（绑定了数据）
C：方法


通过ng实现MVC的基本步骤：
①创建模块
var app = angular.module('模块名字',['依赖模块1','依赖模块2'])

②调用模块
ngApp--》 ng-app="模块名字"

③创建控制器（C）

app.controller('控制器的名称',func)

④使用控制器
ngController：
ng-controller='控制器名称'

⑤创建模型数据（Model），显示在视图（V）中

$scope:是一个作用域对象

实现一个demo：
有一个p,还有一个按钮，
点击按钮，count会自增，显示在p标签
①创建MVC的脚手架
②实现业务逻辑

练习：
对列表实现加载更多的功能。

分析：
①搭建基于angularJS实现MVC的脚手架
②构造数据
③显示
④添加的功能：点击按钮，添加一条数据到数组

实现MVC的基本步骤：
①模块的创建和使用 module
②控制器的创建和使用 controller
③定义模型数据 $scope
④在视图中显示数据，接收用户的操作修改数据

ngInit和$scope都能够完成数据的初始化，怎么选择？
建议：多去使用$scope。
把和功能模块相关的数据存储在$scope中，如果多个模块都要用到同一类数据，可以通过ngInit初始化。























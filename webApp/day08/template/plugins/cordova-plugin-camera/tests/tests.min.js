exports.defineAutoTests=function(){describe("Camera (navigator.camera)",function(){it("should exist",function(){expect(navigator.camera).toBeDefined()});it("should contain a getPicture function",function(){expect(navigator.camera.getPicture).toBeDefined();expect(typeof navigator.camera.getPicture=="function").toBe(true)})});describe("Camera Constants (window.Camera + navigator.camera)",function(){it("camera.spec.1 window.Camera should exist",function(){expect(window.Camera).toBeDefined()});it("camera.spec.2 should contain three DestinationType constants",function(){expect(Camera.DestinationType.DATA_URL).toBe(0);expect(Camera.DestinationType.FILE_URI).toBe(1);expect(Camera.DestinationType.NATIVE_URI).toBe(2);expect(navigator.camera.DestinationType.DATA_URL).toBe(0);expect(navigator.camera.DestinationType.FILE_URI).toBe(1);expect(navigator.camera.DestinationType.NATIVE_URI).toBe(2)});it("camera.spec.3 should contain two EncodingType constants",function(){expect(Camera.EncodingType.JPEG).toBe(0);expect(Camera.EncodingType.PNG).toBe(1);expect(navigator.camera.EncodingType.JPEG).toBe(0);expect(navigator.camera.EncodingType.PNG).toBe(1)});it("camera.spec.4 should contain three MediaType constants",function(){expect(Camera.MediaType.PICTURE).toBe(0);expect(Camera.MediaType.VIDEO).toBe(1);expect(Camera.MediaType.ALLMEDIA).toBe(2);expect(navigator.camera.MediaType.PICTURE).toBe(0);expect(navigator.camera.MediaType.VIDEO).toBe(1);expect(navigator.camera.MediaType.ALLMEDIA).toBe(2)});it("camera.spec.5 should contain three PictureSourceType constants",function(){expect(Camera.PictureSourceType.PHOTOLIBRARY).toBe(0);expect(Camera.PictureSourceType.CAMERA).toBe(1);expect(Camera.PictureSourceType.SAVEDPHOTOALBUM).toBe(2);expect(navigator.camera.PictureSourceType.PHOTOLIBRARY).toBe(0);expect(navigator.camera.PictureSourceType.CAMERA).toBe(1);expect(navigator.camera.PictureSourceType.SAVEDPHOTOALBUM).toBe(2)})})};exports.defineManualTests=function(s,N){var v=null;var d=null;var t=null;var l=+new Date();var m=["50",50];var w=["FILE_URI",1];var P=["CAMERA",1];var A=["allowEdit",false];var p=["JPEG",0];var D=["mediaType",0];var y=["correctOrientation",false];var q=["saveToPhotoAlbum",true];function k(i){console.log(i);document.getElementById("camera_status").textContent+=(new Date()-l)/1000+": "+i+"\n"}function B(){document.getElementById("camera_status").innerHTML="";document.getElementById("camera_image").src="about:blank";var i=document.getElementById("canvas");i.width=i.height=1;v=null;d=null;t=null}function e(R,U){try{window.atob(R);R="data:image/jpeg;base64,"+R}catch(T){}k('URL: "'+R.slice(0,90)+'"');v=R;var i=document.getElementById("camera_image");var S=new Date();i.src=R;i.onloadend=function(){k("Image tag load time: "+(new Date()-S));if(U){U()}}}function r(i){k("Error getting picture: "+(i.code||i))}function H(i){e(i);if(v.indexOf("file:")===0||v.indexOf("content:")===0||v.indexOf("ms-appdata:")===0||v.indexOf("assets-library:")===0){resolveLocalFileSystemURI(i,function(S){t=S;n("resolveLocalFileSystemURI()",true)(S.toURL());h()},n("resolveLocalFileSystemURI()",false))}else{if(v.indexOf("data:image/jpeg;base64")===0){}else{var R=v.replace(/^file:\/\/(localhost)?/,"").replace(/%20/g," ");t=new FileEntry("image_name.png",R)}}}function z(){B();var R=K();k("Getting picture with options: "+JSON.stringify(R));var i=navigator.camera.getPicture(H,r,R);window.onorientationchange=function(){var S=new CameraPopoverOptions(0,0,100,100,0);i.setPosition(S)}}function E(){var U=new FileTransfer(),R=new FileUploadOptions();R.fileKey="photo";R.fileName="test.jpg";R.mimeType="image/jpeg";U.onprogress=function(V){console.log("progress: "+V.loaded+" of "+V.total)};var T="http://cordova-filetransfer.jitsu.com";U.upload(v,T+"/upload",S,i,R);function S(V){k("upload complete")}function i(V){k("upload failed: "+JSON.stringify(V))}}function n(i,R){return function(){k("Call to "+i+(R?" success: ":" failed: ")+JSON.stringify([].slice.call(arguments)))}}function h(){function R(S){var T=document.getElementById("camera_image");T.style.visibility="visible";T.style.display="block";T.src=S.target.result;k("FileReader.readAsDataURL success")}function i(T){k("Got file: "+JSON.stringify(T));d=T;var S=new FileReader();S.onload=function(){k("FileReader.readAsDataURL() - length = "+S.result.length)};S.onerror=n("FileReader.readAsDataURL",false);S.onloadend=R;S.readAsDataURL(T)}if(d){i(d)}else{t.file(i,n("FileEntry.file",false))}}function Q(){t.getMetadata(n("FileEntry.getMetadata",true),n("FileEntry.getMetadata",false));t.setMetadata(n("FileEntry.setMetadata",true),n("FileEntry.setMetadata",false),{"com.apple.MobileBackup":1});t.getParent(n("FileEntry.getParent",true),n("FileEntry.getParent",false));t.getParent(n("FileEntry.getParent",true),n("FileEntry.getParent",false))}function u(){var i=function(S){var T=S.root;var R=t.name;t.copyTo(T,"copied_file.png",n("FileEntry.copyTo",true),n("FileEntry.copyTo",false));t.moveTo(T,"moved_file.png",n("FileEntry.moveTo",true),n("FileEntry.moveTo",false));resolveLocalFileSystemURI(T.nativeURL+"moved_file.png",function(U){U.moveTo(T,R,n("FileEntry.moveTo",true),n("FileEntry.moveTo",false));console.log("Cleanup: successfully renamed file back to original name")},function(){console.log("Cleanup: failed to rename file back to original name")});resolveLocalFileSystemURI(T.nativeURL+"copied_file.png",function(U){U.remove(n("FileEntry.remove",true),n("FileEntry.remove",false));console.log("Cleanup: successfully removed copied file")},function(){console.log("Cleanup: failed to remove copied file")})};window.requestFileSystem(LocalFileSystem.TEMPORARY,0,i,null)}function F(){var i=function(S){S.onwrite=n("FileWriter.write",true);S.onerror=n("FileWriter.write",false);S.write("some text!")};var R=function(S){S.onwrite=n("FileWriter.truncate",true);S.onerror=n("FileWriter.truncate",false);S.truncate(10)};t.createWriter(i,n("FileEntry.createWriter",false));t.createWriter(R,null)}function c(){var S=document.getElementById("canvas");var R=document.getElementById("camera_image");var i=R.width;var U=R.height;U=100/i*U;i=100;S.width=i;S.height=U;var T=S.getContext("2d");T.drawImage(R,0,0,i,U)}function j(){t.remove(n("FileEntry.remove",true),n("FileEntry.remove",false))}function I(i){B();window.setTimeout(function(){O(i)},0)}function O(S){if(!S.value){alert("No file selected.");return}d=S.files[0];if(!d){alert("Got value but no file.");return}var R=window.URL||window.webkitURL;if(R){var i=R.createObjectURL(d);if(i){e(i,function(){R.revokeObjectURL(i)})}else{k("URL.createObjectURL returned null")}}else{k("URL.createObjectURL() not supported.")}}function K(){var T=document.querySelectorAll("#image-options select");var R={};for(var S=0,U;U=T[S];++S){var V=U.value;if(V===""){continue}V=+V;if(U.isBool){R[U.getAttribute("name")]=!!V}else{R[U.getAttribute("name")]=V}}return R}function g(i,Y,U){var S='<div style="display: inline-block">'+i+": ";var X="<select name="+i+' id="'+i+'">';var W="";if(U===undefined){W='<option value="">default</option>'}var Z="";if(typeof Y=="boolean"){Y={"true":1,"false":0}}for(var T in Y){var R="";if(U){if(U[0]==T){R="selected"}}Z+='<option value="'+Y[T]+'" '+R+">"+T+"</option>"}var V="</select></div>";return S+X+W+Z+V}var C='<h1>Camera</h1><div id="info"><b>Status:</b> <div id="camera_status"></div>img: <img width="100" id="camera_image">canvas: <canvas id="canvas" width="1" height="1"></canvas></div>',J='<h2>Cordova Camera API Options</h2><div id="image-options">'+g("sourceType",Camera.PictureSourceType,P)+g("destinationType",Camera.DestinationType,w)+g("encodingType",Camera.EncodingType,p)+g("mediaType",Camera.MediaType,D)+g("quality",{"0":0,"50":50,"80":80,"100":100},m)+g("targetWidth",{"50":50,"200":200,"800":800,"2048":2048})+g("targetHeight",{"50":50,"200":200,"800":800,"2048":2048})+g("allowEdit",true,A)+g("correctOrientation",true,y)+g("saveToPhotoAlbum",true,q)+g("cameraDirection",Camera.Direction)+"</div>",G='<div id="getpicture"></div>',o='<h4>Recommended Test Procedure</h4>Options not specified should be the default value<br>Status box should update with image and info whenever an image is taken or selected from library</p><div style="background:#B0C4DE;border:1px solid #FFA07A;margin:15px 6px 0px;min-width:295px;max-width:97%;padding:4px 0px 2px 10px;min-height:160px;max-height:200px;overflow:auto"><ol> <li>All default options. Should be able to edit once picture is taken and will be saved to library.</li></p><li>sourceType=PHOTOLIBRARY<br>Should be able to see picture that was just taken in previous test and edit when selected</li></p><li>sourceType=Camera<br>allowEdit=false<br>saveToPhotoAlbum=false<br>Should not be able to edit when taken and will not save to library</li></p><li>encodingType=PNG<br>allowEdit=true<br>saveToPhotoAlbum=true<br>cameraDirection=FRONT<br>Should bring up front camera. Verify in status box info URL that image is encoded as PNG.</li></p><li>sourceType=SAVEDPHOTOALBUM<br>mediaType=VIDEO<br>Should only be able to select a video</li></p><li>sourceType=SAVEDPHOTOALBUM<br>mediaType=PICTURE<br>allowEdit=false<br>Should only be able to select a picture and not edit</li></p><li>sourceType=PHOTOLIBRARY<br>mediaType=ALLMEDIA<br>allowEdit=true<br>Should be able to select pics and videos and edit picture if selected</li></p><li>sourceType=CAMERA<br>targetWidth & targetHeight=50<br>allowEdit=false<br>Do Get File Metadata test below and take note of size<br>Repeat test but with width and height=800. Size should be significantly larger.</li></p><li>quality=0<br>targetWidth & targetHeight=default<br>allowEdit=false<br>Do Get File Metadata test below and take note of size<br>Repeat test but with quality=80. Size should be significantly larger.</li></ol></div>',a='<h2>Native File Inputs</h2>For the following tests, status box should update with file selected</p><div>input type=file <input type="file" class="testInputTag"></div><div>capture=camera <input type="file" accept="image/*;capture=camera" class="testInputTag"></div><div>capture=camcorder <input type="file" accept="video/*;capture=camcorder" class="testInputTag"></div><div>capture=microphone <input type="file" accept="audio/*;capture=microphone" class="testInputTag"></div>',b='<h2>Actions</h2>For the following tests, ensure that an image is set in status box</p><div id="metadata"></div>Expected result: Get metadata about file selected.<br>Status box will show, along with the metadata, "Call to FileEntry.getMetadata success, Call to FileEntry.setMetadata success, Call to FileEntry.getParent success"</p><div id="reader"></div>Expected result: Read contents of file.<br>Status box will show "Got file: {some metadata}, FileReader.readAsDataURL() - length = someNumber"</p><div id="copy"></div>Expected result: Copy image to new location and move file to different location.<br>Status box will show "Call to FileEntry.copyTo success:{some metadata}, Call to FileEntry.moveTo success:{some metadata}"</p><div id="write"></div>Expected result: Write image to library.<br>Status box will show "Call to FileWriter.write success:{some metadata}, Call to FileWriter.truncate success:{some metadata}"</p><div id="upload"></div>Expected result: Upload image to server.<br>Status box may print out progress. Once finished will show "upload complete"</p><div id="draw_canvas"></div>Expected result: Display image using canvas.<br>Image will be displayed in status box under "canvas:"</p><div id="remove"></div>Expected result: Remove image from library.<br>Status box will show "FileEntry.remove success:["OK"]';if(window.MSApp&&window.MSApp.execUnsafeLocalFunction){MSApp.execUnsafeLocalFunction(function(){s.innerHTML=C+J+G+o+a+b})}else{s.innerHTML=C+J+G+o+a+b}var f=document.getElementsByClassName("testInputTag");var L=function(i){I(i.target)};for(var M=0;M<f.length;++M){var x=f[M];x.addEventListener("change",L,false)}N("Get picture",function(){z()},"getpicture");N("Clear Status",function(){B()},"getpicture");N("Get File Metadata",function(){Q()},"metadata");N("Read with FileReader",function(){h()},"reader");N("Copy Image",function(){u()},"copy");N("Write Image",function(){F()},"write");N("Upload Image",function(){E()},"upload");N("Draw Using Canvas",function(){c()},"draw_canvas");N("Remove Image",function(){j()},"remove")};
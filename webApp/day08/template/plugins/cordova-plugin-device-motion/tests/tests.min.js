exports.defineAutoTests=function(){var a=(cordova.platformId==="windows")||(cordova.platformId==="windows8"),b=a?Windows.Devices.Sensors.Accelerometer.getDefault()!==null:true;describe("Accelerometer (navigator.accelerometer)",function(){var c=function(d){expect(true).toBe(false);d()};afterEach(function(d){setTimeout(function(){d()},100)});it("accelerometer.spec.1 should exist",function(){expect(navigator.accelerometer).toBeDefined()});describe("getCurrentAcceleration",function(){it("accelerometer.spec.2 should exist",function(){expect(typeof navigator.accelerometer.getCurrentAcceleration).toBeDefined();expect(typeof navigator.accelerometer.getCurrentAcceleration=="function").toBe(true)});it("accelerometer.spec.3 success callback should be called with an Acceleration object",function(d){if(!b){pending()}var f=function(g){expect(g).toBeDefined();expect(g.x).toBeDefined();expect(typeof g.x=="number").toBe(true);expect(g.y).toBeDefined();expect(typeof g.y=="number").toBe(true);expect(g.z).toBeDefined();expect(typeof g.z=="number").toBe(true);expect(g.timestamp).toBeDefined();expect(typeof g.timestamp).toBe("number");d()};var e=function(g){console.log(g);console.log("Skipping gyroscope tests, marking all as pending.");b=false;expect(true).toBe(true);d()};navigator.accelerometer.getCurrentAcceleration(f,e)});it("accelerometer.spec.4 success callback Acceleration object should have (reasonable) values for x, y and z expressed in m/s^2",function(d){if(!b){pending()}var e=15;var f=function(g){expect(g.x).toBeLessThan(e);expect(g.x).toBeGreaterThan(e*-1);expect(g.y).toBeLessThan(e);expect(g.y).toBeGreaterThan(e*-1);expect(g.z).toBeLessThan(e);expect(g.z).toBeGreaterThan(e*-1);d()};navigator.accelerometer.getCurrentAcceleration(f,c.bind(null,d))});it("accelerometer.spec.5 success callback Acceleration object should return a recent timestamp",function(d){if(!b){pending()}var f=(new Date()).getTime();var e=f+5000;var g=function(h){expect(h.timestamp).toBeGreaterThan(f);expect(h.timestamp).toBeLessThan(e);d()};navigator.accelerometer.getCurrentAcceleration(g,c.bind(null,d))})});describe("watchAcceleration",function(){var d;afterEach(function(){navigator.accelerometer.clearWatch(d)});it("accelerometer.spec.6 should exist",function(){expect(navigator.accelerometer.watchAcceleration).toBeDefined();expect(typeof navigator.accelerometer.watchAcceleration=="function").toBe(true)});it("accelerometer.spec.7 success callback should be called with an Acceleration object",function(e){if(!b){pending()}var f=function(g){expect(g).toBeDefined();expect(g.x).toBeDefined();expect(typeof g.x=="number").toBe(true);expect(g.y).toBeDefined();expect(typeof g.y=="number").toBe(true);expect(g.z).toBeDefined();expect(typeof g.z=="number").toBe(true);expect(g.timestamp).toBeDefined();expect(typeof g.timestamp).toBe("number");e()};d=navigator.accelerometer.watchAcceleration(f,c.bind(null,e),{frequency:100})});it("accelerometer.spec.8 success callback Acceleration object should have (reasonable) values for x, y and z expressed in m/s^2",function(e){if(!b){pending()}var f=15;var g=function(h){expect(h.x).toBeLessThan(f);expect(h.x).toBeGreaterThan(f*-1);expect(h.y).toBeLessThan(f);expect(h.y).toBeGreaterThan(f*-1);expect(h.z).toBeLessThan(f);expect(h.z).toBeGreaterThan(f*-1);e()};d=navigator.accelerometer.watchAcceleration(g,c.bind(null,e),{frequency:100})});it("accelerometer.spec.9 success callback Acceleration object should return a recent timestamp",function(e){if(!b){pending()}var g=(new Date()).getTime();var f=g+5000;var h=function(i){expect(i.timestamp).toBeGreaterThan(g);expect(i.timestamp).toBeLessThan(f);e()};d=navigator.accelerometer.watchAcceleration(h,c.bind(null,e),{frequency:100})});it("accelerometer.spec.12 success callback should be preserved and called several times",function(f){if(!b){pending()}var g=0,e=3;var h=function(i){if(g++<e){return}expect(typeof i).toBe("object");f()};d=navigator.accelerometer.watchAcceleration(h,c.bind(null,f),{frequency:100})})});describe("clearWatch",function(){it("accelerometer.spec.10 should exist",function(){expect(navigator.accelerometer.clearWatch).toBeDefined();expect(typeof navigator.accelerometer.clearWatch=="function").toBe(true)});it("accelerometer.spec.11 should clear an existing watch",function(d){if(!b){pending()}var f;var e=function(g){navigator.accelerometer.clearWatch(f);var h=setTimeout(function(){expect(true).toBe(true);d()},101);e=function(){clearTimeout(h);c(d)}};f=navigator.accelerometer.watchAcceleration(function(){e()},c.bind(null,d),{frequency:100})})})})};exports.defineManualTests=function(b,g){function c(k){var l=3;var j=Math.round(k*Math.pow(10,l))/Math.pow(10,l);return j}var a=null;function h(j){document.getElementById("accel_status").innerHTML=j}function d(){console.log("stopAccel()");h("Stopped");if(a){navigator.accelerometer.clearWatch(a);a=null}}var e=function(){console.log("watchAccel()");var l=function(m){document.getElementById("x").innerHTML=c(m.x);document.getElementById("y").innerHTML=c(m.y);document.getElementById("z").innerHTML=c(m.z)};var j=function(m){console.log("watchAccel fail callback with error code "+m);d();h(m)};var k={};k.frequency=1000;a=navigator.accelerometer.watchAcceleration(l,j,k);h("Running")};var i=function(){console.log("getAccel()");d();var l=function(m){document.getElementById("x").innerHTML=c(m.x);document.getElementById("y").innerHTML=c(m.y);document.getElementById("z").innerHTML=c(m.z);console.log("getAccel success callback")};var j=function(m){console.log("getAccel fail callback with error code "+m);h(m)};var k={};navigator.accelerometer.getCurrentAcceleration(l,j,k)};var f='<div id="getAcceleration"></div>Expected result: Will update the status box with X, Y, and Z values when pressed. Status will read "Stopped"<p/> <div id="watchAcceleration"></div>Expected result: When pressed, will start a watch on the accelerometer and update X,Y,Z values when movement is sensed. Status will read "Running"<p/> <div id="clearAcceleration"></div>Expected result: Will clear the accelerometer watch, so X,Y,Z values will no longer be updated. Status will read "Stopped"';b.innerHTML='<div id="info">Status: <span id="accel_status">Stopped</span><table width="100%"><tr><td width="20%">X:</td><td id="x"> </td></tr><tr><td width="20%">Y:</td><td id="y"> </td></tr><tr><td width="20%">Z:</td><td id="z"> </td></tr></table></div>'+f;g("Get Acceleration",function(){i()},"getAcceleration");g("Start Watch",function(){e()},"watchAcceleration");g("Clear Watch",function(){d()},"clearAcceleration")};
exports.defineAutoTests=function(){var a=null,b=cordova.platformId=="windowsphone",d=(cordova.platformId==="windows")||(cordova.platformId==="windows8"),f=d&&WinJS.Utilities.isPhone;var e=false;var c=function(j){expect(true).toBe(false);j()};var g=30000;var i=function(j){if(!a){j();return}a.remove(function(){a=null;j()},function(){j()})};function h(j,l,k){var m=new ContactFindOptions();m.filter=l;m.multiple=true;navigator.contacts.find(j,function(o){var n=[];o.forEach(function(r){n.push(r)});if(n.length==0){k();return}var q=undefined;if(n.length>0){q=n.shift()}function p(s){if(typeof s==="undefined"){k();return}if(n.length>0){q=n.shift()}else{q=undefined}s.remove(function t(){p(q)},function r(){p(q)})}p(q)},k,m)}describe("Contacts (navigator.contacts)",function(){it("contacts.spec.1 should exist",function(){expect(navigator.contacts).toBeDefined()});it("contacts.spec.2 should contain a find function",function(){expect(navigator.contacts.find).toBeDefined();expect(typeof navigator.contacts.find).toBe("function")});describe("find method",function(){it("contacts.spec.3 success callback should be called with an array",function(k){if(d&&!f){pending();return}var m=function(n){expect(n).toBeDefined();expect(n instanceof Array).toBe(true);k()},l=new ContactFindOptions();l.filter="";l.multiple=true;function j(n){if(n.code==ContactError.PERMISSION_DENIED_ERROR){e=true;k()}}navigator.contacts.find(["displayName","name","phoneNumbers","emails"],m,j,l)});it("contacts.spec.4 success callback should be called with an array, even if partial ContactFindOptions specified",function(j){if((d&&!f)||e){pending();return}var k=function(l){expect(l).toBeDefined();expect(l instanceof Array).toBe(true);j()};navigator.contacts.find(["displayName","name","phoneNumbers","emails"],k,c.bind(null,j),{multiple:true})});it("contacts.spec.5 should throw an exception if success callback is empty",function(){var j=new ContactFindOptions();j.filter="";j.multiple=true;expect(function(){navigator.contacts.find(["displayName","name","emails","phoneNumbers"],null,c.bind(null,done),j)}).toThrow()});it("contacts.spec.6 error callback should be called when no fields are specified",function(j){var m=c,k=function(n){expect(n).toBeDefined();expect(n.code).toBe(ContactError.INVALID_ARGUMENT_ERROR);j()},l=new ContactFindOptions();l.filter="";l.multiple=true;navigator.contacts.find([],m,k,l)});describe("with newly-created contact",function(){afterEach(function(j){i(j)});it("contacts.spec.7 should be able to find a contact by name",function(j){if(d||b||e){pending()}var k=function(m){var o=false;try{for(var n=0;n<m.length;n++){if(m[n].name.familyName=="Delete"){o=true;break}}}catch(p){return false}return o},l=function(n){a=n;var p=function(q){expect(q instanceof Array).toBe(true);expect(q.length>=1).toBe(true);expect(k(q)).toBe(true);j()},m=c,o=new ContactFindOptions();o.filter="Delete";o.multiple=true;navigator.contacts.find(["displayName","name","phoneNumbers","emails"],p,m.bind(null,j),o)};a=new Contact();a.name=new ContactName();a.name.familyName="Delete";a.save(l,c.bind(null,j))})})});describe("create method",function(){it("contacts.spec.8 should exist",function(){expect(navigator.contacts.create).toBeDefined();expect(typeof navigator.contacts.create).toBe("function")});it("contacts.spec.9 should return a Contact object",function(){var j=new Date(1976,7,4);var k=navigator.contacts.create({displayName:"test name",gender:"male",note:"my note",name:{formatted:"Mr. Test Name"},emails:[{value:"here@there.com"},{value:"there@here.com"}],birthday:j});expect(k).toBeDefined();expect(k.displayName).toBe("test name");expect(k.note).toBe("my note");expect(k.name.formatted).toBe("Mr. Test Name");expect(k.emails.length).toBe(2);expect(k.emails[0].value).toBe("here@there.com");expect(k.emails[1].value).toBe("there@here.com");expect(k.nickname).toBe(null);expect(k.birthday).toBe(j)})});describe("Contact object",function(){it("contacts.spec.10 should be able to create instance",function(){var j=new Contact("a","b",new ContactName("a","b","c","d","e","f"),"c",[],[],[],[],[],"f","i",[],[],[]);expect(j).toBeDefined();expect(j.id).toBe("a");expect(j.displayName).toBe("b");expect(j.name.formatted).toBe("a");expect(j.nickname).toBe("c");expect(j.phoneNumbers).toBeDefined();expect(j.emails).toBeDefined();expect(j.addresses).toBeDefined();expect(j.ims).toBeDefined();expect(j.organizations).toBeDefined();expect(j.birthday).toBe("f");expect(j.note).toBe("i");expect(j.photos).toBeDefined();expect(j.categories).toBeDefined();expect(j.urls).toBeDefined()});it("contacts.spec.11 should be able to define a ContactName object",function(){var j=new ContactName("Dr. First Last Jr.","Last","First","Middle","Dr.","Jr.");expect(j).toBeDefined();expect(j.formatted).toBe("Dr. First Last Jr.");expect(j.familyName).toBe("Last");expect(j.givenName).toBe("First");expect(j.middleName).toBe("Middle");expect(j.honorificPrefix).toBe("Dr.");expect(j.honorificSuffix).toBe("Jr.")});it("contacts.spec.12 should be able to define a ContactField object",function(){var j=new ContactField("home","8005551212",true);expect(j).toBeDefined();expect(j.type).toBe("home");expect(j.value).toBe("8005551212");expect(j.pref).toBe(true)});it("contacts.spec.13 ContactField object should coerce type and value properties to strings",function(){var j=new ContactField(12345678,12345678,true);expect(j.type).toBe("12345678");expect(j.value).toBe("12345678")});it("contacts.spec.14 should be able to define a ContactAddress object",function(){var j=new ContactAddress(true,"home","a","b","c","d","e","f");expect(j).toBeDefined();expect(j.pref).toBe(true);expect(j.type).toBe("home");expect(j.formatted).toBe("a");expect(j.streetAddress).toBe("b");expect(j.locality).toBe("c");expect(j.region).toBe("d");expect(j.postalCode).toBe("e");expect(j.country).toBe("f")});it("contacts.spec.15 should be able to define a ContactOrganization object",function(){var j=new ContactOrganization(true,"home","a","b","c","d","e","f","g");expect(j).toBeDefined();expect(j.pref).toBe(true);expect(j.type).toBe("home");expect(j.name).toBe("a");expect(j.department).toBe("b");expect(j.title).toBe("c")});it("contacts.spec.16 should be able to define a ContactFindOptions object",function(){var j=new ContactFindOptions("a",true,"b");expect(j).toBeDefined();expect(j.filter).toBe("a");expect(j.multiple).toBe(true)});it("contacts.spec.17 should contain a clone function",function(){var j=new Contact();expect(j.clone).toBeDefined();expect(typeof j.clone).toBe("function")});it("contacts.spec.18 clone function should make deep copy of Contact Object",function(){var j=new Contact();j.id=1;j.displayName="Test Name";j.nickname="Testy";j.gender="male";j.note="note to be cloned";j.name=new ContactName("Mr. Test Name");var k=j.clone();expect(j.id).toBe(1);expect(k.id).toBe(null);expect(k.displayName).toBe(j.displayName);expect(k.nickname).toBe(j.nickname);expect(k.gender).toBe(j.gender);expect(k.note).toBe(j.note);expect(k.name.formatted).toBe(j.name.formatted);expect(k.connected).toBe(j.connected)});it("contacts.spec.19 should contain a save function",function(){var j=new Contact();expect(j.save).toBeDefined();expect(typeof j.save).toBe("function")});it("contacts.spec.20 should contain a remove function",function(){var j=new Contact();expect(j.remove).toBeDefined();expect(typeof j.remove).toBe("function")})});describe("save method",function(){afterEach(function(j){i(j)});it("contacts.spec.21 should be able to save a contact",function(k){if(d||b||e){pending()}var j=new Date(1976,6,4);var n={gender:"male",note:"my note",name:{familyName:"Delete",givenName:"Test"},emails:[{value:"here@there.com"},{value:"there@here.com"}],birthday:j};var m=function(o){expect(o).toBeDefined();expect(o.note).toBe("my note");expect(o.name.familyName).toBe("Delete");expect(o.name.givenName).toBe("Test");expect(o.emails.length).toBe(2);expect(o.emails[0].value).toBe("here@there.com");expect(o.emails[1].value).toBe("there@here.com");expect(o.birthday.toDateString()).toBe(j.toDateString());expect(o.addresses).toBe(null);a=o;k()},l=c.bind(null,k);navigator.contacts.create(n).save(m,l)});it("contacts.spec.22 update a contact",function(l){if(d||b||e){pending()}var m=new Date(1976,6,4);var k;var j="an UPDATED note";var p={gender:"male",note:"my note",name:{familyName:"Delete",givenName:"Test"},emails:[{value:"here@there.com"},{value:"there@here.com"}],birthday:m};var n=c.bind(null,l);var o=function(r){a=r;a.emails[1].value="";k=new Date(1975,5,4);a.birthday=k;a.note=j;a.save(q,n)};var q=function(r){expect(r).toBeDefined();expect(r.id).toBe(a.id);expect(r.note).toBe(j);expect(r.birthday.toDateString()).toBe(k.toDateString());expect(r.emails.length).toBe(1);expect(r.emails[0].value).toBe("here@there.com");l()};navigator.contacts.create(p).save(o,n)},g)});describe("Contact.remove method",function(j){afterEach(function(k){i(k)});it("contacts.spec.23 calling remove on a contact that has an id of null should return ContactError.UNKNOWN_ERROR",function(l){var k=function(n){expect(n.code).toBe(ContactError.UNKNOWN_ERROR);l()};var m=new Contact();m.remove(c.bind(null,l),k)});it("contacts.spec.24 calling remove on a contact that does not exist should return ContactError.UNKNOWN_ERROR",function(m){if(d||b||e){pending()}var n=c.bind(null,m);var l=function(o){expect(o.code).toBe(ContactError.UNKNOWN_ERROR);m()};var k=new Contact("this string is supposed to be a unique identifier that will never show up on a device");k.remove(n,l)},g)});describe("Round trip Contact tests (creating + save + delete + find)",function(){var j=function(k,m,l){h(["note"],"DeleteMe",function(){a.save(function(p){var q=function(r){a=r[0];expect(r.length).toBe(1);l()};var n=c;var o=new ContactFindOptions();o.filter=m;o.multiple=true;navigator.contacts.find(k,q,n,o)},c)})};afterEach(function(k){i(k)});it("contacts.spec.25 Creating, saving, finding a contact should work",function(k){if(d||b||e){pending()}var l="DeleteMe";a=new Contact();a.name=new ContactName();a.name.familyName=l;j(["displayName","name"],l,k)},g);it("contacts.spec.26 Creating, saving, finding a contact should work, removing it should work",function(k){if(d||b||e){pending()}var l="DeleteMe";a=new Contact();a.name=new ContactName();a.name.familyName=l;j(["displayName","name"],l,function(){a.remove(function(){k()},function(m){throw ("Newly created contact's remove function invoked error callback. Test failed.")})})},g);it("contacts.spec.27 Should not be able to delete the same contact twice",function(k){if(d||b||e){pending()}var l="DeleteMe";a=new Contact();a.name=new ContactName();a.name.familyName=l;j(["displayName","name"],l,function(){a.remove(function(){var n=function(o){expect(o.length).toBe(0);a.remove(function(){throw ("Success callback called after non-existent Contact object called remove(). Test failed.")},function(p){expect(p.code).toBe(ContactError.UNKNOWN_ERROR);k()})};var m=new ContactFindOptions();m.filter=l;m.multiple=true;navigator.contacts.find(["displayName","name","phoneNumbers","emails"],n,c,m)},c)})},g);it("contacts.spec.28 should find a contact with unicode name",function(k){if(d||b){pending()}var l="\u2602";a=new Contact();a.note="DeleteMe";a.name=new ContactName();a.name.familyName=l;j(["displayName","name"],l,k)},g);it("contacts.spec.29 should find a contact without a name",function(l){if(d||b){pending()}a=new Contact();var k=[1];k[0]=new ContactField("work","555-555-1234",true);a.phoneNumbers=k;j(["phoneNumbers"],"555-555-1234",l)},g)});describe("ContactError interface",function(){it("contacts.spec.30 ContactError constants should be defined",function(){expect(ContactError.UNKNOWN_ERROR).toBe(0);expect(ContactError.INVALID_ARGUMENT_ERROR).toBe(1);expect(ContactError.TIMEOUT_ERROR).toBe(2);expect(ContactError.PENDING_OPERATION_ERROR).toBe(3);expect(ContactError.IO_ERROR).toBe(4);expect(ContactError.NOT_SUPPORTED_ERROR).toBe(5);expect(ContactError.OPERATION_CANCELLED_ERROR).toBe(6);expect(ContactError.PERMISSION_DENIED_ERROR).toBe(20)})})})};exports.defineManualTests=function(b,l){function e(n){var m=document.getElementById("contact_results");var o=new ContactFindOptions();if(n){o.filter=n}o.multiple=true;navigator.contacts.find(["displayName","name","phoneNumbers","emails","urls","note"],function(t){var r="";if(t.length==0){r="No contacts found"}else{r="Number of contacts: "+t.length+"<br><table width='100%'><tr><th>Name</th><td>Phone</td><td>Email</td></tr>";for(var q=0;q<t.length;q++){var p=t[q];var u=p.name?"<tr><td>"+p.name.formatted+"</td><td>":"<tr><td>(No Name)</td><td>";r=r+u;if(p.phoneNumbers&&p.phoneNumbers.length>0){r=r+p.phoneNumbers[0].value}r=r+"</td><td>";if(p.emails&&p.emails.length>0){r=r+p.emails[0].value}r=r+"</td></tr>"}r=r+"</table>"}m.innerHTML=r},function(p){if(p.code===ContactError.NOT_SUPPORTED_ERROR){m.innerHTML="Searching for contacts is not supported."}else{m.innerHTML="Search failed: error "+p.code}},o)}function k(){var m=document.getElementById("searchstring");e(m.value)}function i(){var m=document.getElementById("contact_results");navigator.contacts.pickContact(function(n){m.innerHTML=n?"Picked contact: <pre>"+JSON.stringify(n,null,4)+"</pre>":"No contacts found"},function(n){m.innerHTML=(n&&n.code===ContactError.NOT_SUPPORTED_ERROR)?"Searching for contacts is not supported.":(n&&n.code===ContactError.OPERATION_CANCELLED_ERROR)?"Pick cancelled":"Pick failed: error "+(n&&n.code)})}function d(o,q,p,s){try{var r=document.getElementById("contact_results");var m=navigator.contacts.create({displayName:o,name:q,birthday:s,note:"DeleteMe"});var n=[1];n[0]=new ContactField("work",p,true);m.phoneNumbers=n;m.save(function(){r.innerHTML=(o||"Nameless contact")+" saved."},function(u){if(u.code===ContactError.NOT_SUPPORTED_ERROR){r.innerHTML="Saving contacts not supported."}else{r.innerHTML="Contact save failed: error "+u.code}})}catch(t){console.error(t.message)}}function j(){var m="Dooney Evans";var p={formatted:"Dooney Evans",familyName:"Evans",givenName:"Dooney",middleName:""};var n="512-555-1234";var o=new Date(1985,0,23);d(m,p,n,o)}function f(){d()}function a(){var m="Н€йромонах \nФеофаЊ";var n={formatted:"Н€йромонах \nФеофаЊ",familyName:"\nФеофаЊ",givenName:"Н€йромонах",middleName:""};d(m,n)}function h(){var m=document.getElementById("contact_results");var n=new ContactFindOptions();n.filter="Dooney Evans";n.multiple=false;navigator.contacts.find(["displayName","name"],function(q){if(q.length==0){m.innerHTML="No contacts to update.";return}var o=q[0];o.displayName="Urist McContact";var p=new ContactName();p.givenName="Urist";p.familyName="McContact";o.name=p;o.save(function(r){m.innerHTML="Contact updated."},function(r){m.innerHTML="Update failed: error "+r.code})},function(o){if(o.code===ContactError.NOT_SUPPORTED_ERROR){m.innerHTML="Searching for contacts is not supported."}else{m.innerHTML="Search failed: error "+o.code}},n)}function g(){var m=document.getElementById("contact_results");m.innerHTML="";var n=new ContactFindOptions();n.filter="DeleteMe";n.multiple=true;navigator.contacts.find(["note"],function(p){var o=[];p.forEach(function(s){o.push(s)});if(o.length==0){m.innerHTML="No contacts to remove";return}var r=undefined;if(o.length>0){r=o.shift()}function q(t){if(typeof t==="undefined"){return}if(o.length>0){r=o.shift()}else{r=undefined}t.remove(function u(){m.innerHTML+="Removed a contact with ID "+t.id+"<br/>";q(r)},function s(){m.innerHTML+="Failed to remove a contact with ID "+t.id+"<br/>";q(r)})}q(r)},function(o){if(o.code===ContactError.NOT_SUPPORTED_ERROR){m.innerHTML="Searching for contacts is not supported."}else{m.innerHTML="Search failed: error "+o.code}},n)}function c(m,n){if(n===null&&(m.name===null||m.name.formatted===null)){return true}else{if(m.name&&m.name.formatted&&m.name.formatted.indexOf(n)>-1){return true}}return false}b.innerHTML='<div id="info"><b>Results:</b><br><div id="contact_results"></div></div><div id="get_contacts"></div><p>Expected result: Status box will show number of contacts and list them. May be empty on a fresh device until you click Add.</p><div id="filter_contacts">Search: <input type="text" id="searchstring"></div><p>Expected result: Will return only contacts which contain specified string</p><div id="pick_contact"></div><p>Expected result: Device\'s address book will be shown. After picking a contact status box will show Contact object, passed to success callback</p><div id="add_contact"></div><p>Expected result: Will add a new contact. Log will say "Contact saved." or "Saving contacts not supported." if not supported on current platform. Verify by running Get phone contacts again</p><div id="update_contact"></div><p>Expected result: Will rename "Dooney Evans" to "Urist McContact".</p><div id="remove_contacts"></div><p>Expected result: Will remove all contacts created by these tests. Log will output success or failure and ID of the deleted contacts.</p>';l("Get phone's contacts",function(){e()},"get_contacts");l("Filter contacts",function(){k()},"filter_contacts");l("Pick contact",function(){i()},"pick_contact");l("Add a new contact 'Dooney Evans'",function(){j()},"add_contact");l("Add new nameless contact",function(){f()},"add_contact");l("Add new unicode contact",function(){a()},"add_contact");l("Rename 'Dooney Evans'",function(){h()},"update_contact");l("Delete all test contacts",function(){g()},"remove_contacts")};
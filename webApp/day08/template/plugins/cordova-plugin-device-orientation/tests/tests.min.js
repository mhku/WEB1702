exports.defineAutoTests=function(){var a=function(c,d){d=(typeof d!=="string")?"Forced failure: wrong callback called":d;expect(true).toFailWithMessage(d);c()},b="Forced failure: error callback should not have been called";describe("Compass (navigator.compass)",function(){beforeEach(function(){jasmine.Expectation.addMatchers({toFailWithMessage:function(){return{compare:function(f,d){var e=false;if(d===undefined){d="Forced failure: wrong callback called"}return{pass:e,message:d}}}}})});var c=true;beforeEach(function(d){if(!c){d();return}navigator.compass.getCurrentHeading(d,function(e){if(e.code==CompassError.COMPASS_NOT_SUPPORTED){c=false}d()})});it("compass.spec.1 should exist",function(){expect(navigator.compass).toBeDefined()});it("compass.spec.2 should contain a getCurrentHeading function",function(){expect(navigator.compass.getCurrentHeading).toBeDefined();expect(typeof navigator.compass.getCurrentHeading=="function").toBe(true)});it("compass.spec.3 getCurrentHeading success callback should be called with a Heading object",function(d){if(!c){pending()}navigator.compass.getCurrentHeading(function(e){expect(e instanceof CompassHeading).toBe(true);expect(e.magneticHeading).toBeDefined();expect(typeof e.magneticHeading=="number").toBe(true);expect(e.trueHeading).not.toBe(undefined);expect(typeof e.trueHeading=="number"||e.trueHeading===null).toBe(true);expect(e.headingAccuracy).not.toBe(undefined);expect(typeof e.headingAccuracy=="number"||e.headingAccuracy===null).toBe(true);expect(typeof e.timestamp=="number").toBe(true);d()},a.bind(null,d,b))});it("compass.spec.4 should contain a watchHeading function",function(){expect(navigator.compass.watchHeading).toBeDefined();expect(typeof navigator.compass.watchHeading=="function").toBe(true)});it("compass.spec.5 should contain a clearWatch function",function(){expect(navigator.compass.clearWatch).toBeDefined();expect(typeof navigator.compass.clearWatch=="function").toBe(true)});describe("Compass Constants (window.CompassError)",function(){it("compass.spec.1 should exist",function(){expect(window.CompassError).toBeDefined();expect(window.CompassError.COMPASS_INTERNAL_ERR).toBe(0);expect(window.CompassError.COMPASS_NOT_SUPPORTED).toBe(20)})});describe("Compass Heading model (CompassHeading)",function(){it("compass.spec.1 should exist",function(){expect(CompassHeading).toBeDefined()});it("compass.spec.8 should be able to create a new CompassHeading instance with no parameters",function(){var d=new CompassHeading();expect(d).toBeDefined();expect(d.magneticHeading).toBeUndefined();expect(d.trueHeading).toBeUndefined();expect(d.headingAccuracy).toBeUndefined();expect(typeof d.timestamp=="number").toBe(true)});it("compass.spec.9 should be able to create a new CompassHeading instance with parameters",function(){var d=new CompassHeading(1,2,3,4);expect(d.magneticHeading).toBe(1);expect(d.trueHeading).toBe(2);expect(d.headingAccuracy).toBe(3);expect(d.timestamp.valueOf()).toBe(4);expect(typeof d.timestamp=="number").toBe(true)})})})};exports.defineManualTests=function(a,i){function d(k){var l=3;var j=Math.round(k*Math.pow(10,l))/Math.pow(10,l);return j}var f=null;function c(j){document.getElementById("compass_status").innerHTML=j}function b(){c("Stopped");if(f){navigator.compass.clearWatch(f);f=null}}var e=function(){console.log("watchCompass()");var l=function(m){document.getElementById("compassHeading").innerHTML=d(m.magneticHeading)};var j=function(m){console.log("watchCompass fail callback with error code "+m);b();c(m)};b();var k={};k.frequency=1000;f=navigator.compass.watchHeading(l,j,k);c("Running")};var h=function(){console.log("getCompass()");b();var l=function(m){document.getElementById("compassHeading").innerHTML=d(m.magneticHeading)};var j=function(m){console.log("getCompass fail callback with error code "+m.toString);c(m)};var k={};navigator.compass.getCurrentHeading(l,j,k)};var g='<h3>iOS devices may bring up a calibration screen when initiating these tests</h3><div id="getCompass"></div>Expected result: Will update the status box with current heading. Status will read "Stopped"<p/> <div id="watchCompass"></div>Expected result: When pressed, will start a watch on the compass and update the heading value when heading changes. Status will read "Running"<p/> <div id="stopCompass"></div>Expected result: Will clear the compass watch, so heading value will no longer be updated. Status will read "Stopped"';a.innerHTML='<div id="info"><b>Status: </b><span id="compass_status">Stopped</span><table width="100%"><tr><td width="33%">Heading: <span id="compassHeading"></span></td></tr></table></div>'+g;i("Get Compass",function(){h()},"getCompass");i("Start Watching Compass",function(){e()},"watchCompass");i("Stop Watching Compass",function(){b()},"stopCompass")};